plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// https://docs.flutter.dev/deployment/android
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
//    def minSdk = 21 // because of a bug, you need to manually set this below
    def targetSdk = 34

    namespace "com.nyxkn.meditation"
//    compileSdk flutter.compileSdkVersion
    compileSdkVersion targetSdk
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.nyxkn.meditation"
        // FIXME: a bug in flutter_launcher_icons requires min Sdk Version to be specified as a number
        // rather than using the variable minSdk. we can't even use the word min Sdk Version in comments
        // because it just naively looks for any line containing the string. even if it's a comment!
        // https://github.com/fluttercommunity/flutter_launcher_icons/issues/324
//        minSdkVersion flutter.minSdkVersion
        minSdkVersion 21
//        targetSdkVersion flutter.targetSdkVersion
        targetSdkVersion targetSdk
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }

//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }
//    }
}

flutter {
    source '../..'
}

dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

//configurations.all {
//    exclude group: 'me.leolin', module: 'ShortcutBadger'
////    implementation "me.leolin:ShortcutBadger:1.1.22@aar"
//}


// by default we get arm 1000 + version, arm64 2000, x86_64 4000
// this changes the scheme to version * 100
// +1 for x86_64, +2 for arm, +3 for arm64, e.g. 1103 is version 11 arm64

// code from here: https://developer.android.com/studio/build/configure-apk-splits#configure-APK-versions
// more versioning ideas: https://developer.android.com/google/play/publishing/multiple-apks#VersionCodes

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['x86_64': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3]
// For per-density APKs, create a similar map:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code doesn't override the version code for universal APKs.
        // However, because you want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the
            // version code for only the output APK, not for the variant itself. Skipping
            // this step causes Gradle to use the value of variant.versionCode for the APK.
//            output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode

            // my own version:
            output.versionCodeOverride = variant.versionCode * 100 + baseAbiVersionCode
        }
    }
}
